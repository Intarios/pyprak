# This is a basic workflow to help you get started with Actions

name: Python Greetings CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:
env:
  PYTHON_GREETINGS_REPO: "mtararujs/python-greetings"
  PYTHON_GREETINGS_REF: "4e911440a9886c7c26ccbb4eb55f0bc2a5067b51"
  PYTHON_GREETINGS_DIR: "python-greetings"

jobs:

  install-pip-deps:
    runs-on: self-hosted
    steps:
      - name: Starting Job
        run: echo "Installing pip dependencies"
      - uses: actions/checkout@v3.5.2
      - uses: actions/checkout@v3.5.2
        with:
          repository: ${{ env.PYTHON_GREETINGS_REPO }}
          path: ${{ env.PYTHON_GREETINGS_DIR }}
          ref: ${{ env.PYTHON_GREETINGS_REF }}
      - name: Install dependencies
        working-directory:  ${{ env.PYTHON_GREETINGS_DIR }}
        run: pip3 install -r requirements.txt 

  deploy-to-dev:
    runs-on: self-hosted
    needs: [install-pip-deps]
    steps:
      - name: Starting Job
        run: echo "Deploying to DEV"
      - uses: actions/checkout@v3.5.2
      - uses: actions/checkout@v3.5.2
        with:
          repository: ${{ env.PYTHON_GREETINGS_REPO }}
          path: ${{ env.PYTHON_GREETINGS_DIR }}
          ref: ${{ env.PYTHON_GREETINGS_REF }}
      - name: Kill old server instance
        run: "cmd /c \"pm2 delete greetings-app-dev & set \\\"errorlevel=0\\\"\""
      - name: Start new server instance
        working-directory: ${{ env.PYTHON_GREETINGS_DIR }}
        run: "cmd /c \"pm2 start app.py --name greetings-app-dev -- --port=7001\""

  tests-on-dev:
    runs-on: self-hosted
    needs: [deploy-to-dev]
    steps:
      - name: Starting Job
        run: echo "Testing on DEV"
        
  deploy-to-staging:
    runs-on: self-hosted
    needs: [tests-on-dev]
    steps:
      - name: Starting Job
        run: echo "Deploying to STAGING"
        
  tests-on-staging:
    runs-on: self-hosted
    needs: [deploy-to-staging]
    steps:
      - name: Starting Job
        run: echo "Testing on STAGING"
        
  deploy-to-preprod:
    runs-on: self-hosted
    needs: [tests-on-staging]
    steps:
      - name: Starting Job
        run: echo "Deploying to PRE-PRODUCTION"
        
  tests-on-preprod:
    runs-on: self-hosted
    needs: [deploy-to-preprod]
    steps:
      - name: Starting Job
        run: echo "Testing on PRE-PRODUCTION"
        
  deploy-to-prod:
    runs-on: self-hosted
    needs: [tests-on-preprod]
    steps:
      - name: Starting Job
        run: echo "Deploying to PRODUCTION"
        
  Tests-on-prod:
    runs-on: self-hosted
    needs: [deploy-to-prod]
    steps:
      - name: Starting Job
        run: echo "Testing on PRODUCTION"
        

  # build:
  #   # The type of runner that the job will run on
  #   runs-on: ubuntu-latest

  #   # Steps represent a sequence of tasks that will be executed as part of the job
  #   steps:
  #     # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
  #     - uses: actions/checkout@v4

  #     # Runs a single command using the runners shell
  #     - name: Run a one-line script
  #       run: echo Hello, world!

  #     # Runs a set of commands using the runners shell
  #     - name: Run a multi-line script
  #       run: |
  #         echo Add other actions to build,
  #         echo test, and deploy your project.
